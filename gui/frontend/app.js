import { GetTasks, CreateTask, DeleteTask, UpdateTask } from "./wailsjs/go/main/App.js";

const taskList = document.getElementById("taskList");
const nameInput = document.getElementById("taskName");
const descInput = document.getElementById("taskDesc");
const statusSelect = document.getElementById("taskStatus");
const addBtn = document.getElementById("addTask"); // –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å"

const filterStatus = document.getElementById("filterStatus");
const filterDeadline = document.getElementById("filterDeadline");
const applyFiltersBtn = document.getElementById("applyFilters");

const modal = document.createElement("div");
modal.className = "modal";
modal.innerHTML = `
  <div class="modal-content">
    <h3>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É</h3>
    <input id="editName" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" />
    <input id="editDesc" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" />
    <select id="editStatus">
      <option value="–ù–∞–∑–Ω–∞—á–µ–Ω–∞">–ù–∞–∑–Ω–∞—á–µ–Ω–∞</option>
      <option value="–í —Ä–∞–±–æ—Ç–µ">–í —Ä–∞–±–æ—Ç–µ</option>
      <option value="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π">–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π</option>
      <option value="–û—Ç–∫–ª–æ–Ω–µ–Ω–∞">–û—Ç–∫–ª–æ–Ω–µ–Ω–∞</option>
    </select>
    <div style="text-align:right; margin-top:10px;">
      <button id="cancelEdit">–û—Ç–º–µ–Ω–∞</button>
      <button id="saveEdit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    </div>
  </div>
`;
document.body.appendChild(modal);

let editingTaskId = null;



// –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
async function loadTasks() {
    const status = filterStatus.value || "";
    const deadline = filterDeadline.value ? new Date(filterDeadline.value).toISOString() : null;

    const tasks = await GetTasks(status, deadline);
    renderTasks(tasks);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–¥–∞—á
function renderTasks(tasks) {
    taskList.innerHTML = "";

    tasks.forEach(task => {
        const li = document.createElement("li");

        const delBtn = document.createElement("button");
        delBtn.textContent = "‚ùå";
        delBtn.addEventListener("click", () => deleteTask(task.id));

        const editBtn = document.createElement("button");
        editBtn.textContent = "üîÑ";
        editBtn.addEventListener("click", () => openModal(task));

        li.innerHTML = `<b>${task.name}</b> - <span class="status-${task.status.replace(" ", "\\ ")}">${task.status}</span> <small>(–¥–µ–¥–ª–∞–π–Ω: ${task.deadline || "‚Äî"})</small>`;
        li.appendChild(delBtn);
        li.appendChild(editBtn);

        taskList.appendChild(li);
    });
}

// –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
async function addTask() {
    const name = nameInput.value;
    const desc = descInput.value;
    const status = statusSelect.value;

    if (!name) return alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ");

    await CreateTask(name, desc, status, null);
    nameInput.value = "";
    descInput.value = "";
    await loadTasks();
}

// —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
async function deleteTask(id) {
    await DeleteTask(id);
    await loadTasks();
}

// –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
function openModal(task) {
    editingTaskId = task.id;
    document.getElementById("editName").value = task.name;
    document.getElementById("editDesc").value = task.desc || "";
    document.getElementById("editStatus").value = task.status;
    modal.style.display = "flex";
}

// –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
function closeModal() {
    modal.style.display = "none";
    editingTaskId = null;
}

// —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
async function saveTask() {
    const name = document.getElementById("editName").value;
    const desc = document.getElementById("editDesc").value;
    const status = document.getElementById("editStatus").value;

    if (!editingTaskId) return;

    await UpdateTask(editingTaskId, name, desc, status, null);
    closeModal();
    await loadTasks();
}

async function loadTasksWithFilters() {
    const status = filterStatus.value || "";
    const deadline = filterDeadline.value || "";

    const tasks = await GetTasks(status, deadline);
    renderTasks(tasks);
}

applyFiltersBtn.addEventListener("click", loadTasksWithFilters);


// –Ω–∞–≤–µ—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
addBtn.addEventListener("click", addTask);
document.getElementById("cancelEdit").addEventListener("click", closeModal);
document.getElementById("saveEdit").addEventListener("click", saveTask);

// –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadTasks();
